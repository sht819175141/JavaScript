1、给Array原型添加一个方法，这个方法接受一个参数，如果这个参数
在数组中存在那么就把它从数组中删除。

Array.prototype.inArray=function(val){
	for(var i=0;i<this.lenght;i++){
		if(val==this[i]){
			return i;
		}
	}
	return -1;
}

返回的是存在值得索引；

Array.prototype.remove=function(){
	var index=this.inArray(val);
	if(index>-1){
		this.replice(index,1);
		return this;
	}
	return false;
}

返回的是删减已查到的内容的数组；

2、var str="test";
function func1(){
	console.log(str);
}
function func2(){
	var str="test2";
	func1();
}
func2();
以上代码输出结果是什么，并说明原因；

test；
因为func1执行的是全局的str；不能执行局部里的str；

3、跨域是如何产生的？简述JSONP的原理，并写出核心代码，如
跨域的地址是：http://www.51code.com/demo

<script src="http://www.51.job.com/demo?callBack=callFn"></script>
<script>
	function callFn(data){
		console.log(data);
	}
</script>


4、写出三条以上IE与非IE在JS方面存在的浏览器兼容
5、使用JS原生实现，点击id为box下的li时，弹出每一个li的索引
6、已知结构：<ul>
	<li>列表4</li>
	<li>列表1</li>
	<li>列表3</li>
	<li>列表2</li>
	<li>列表5</li>
</ul>
<input type="button" value="排序" id="sort">
要求：使用jquery实现点击排序按钮后，页面的显示结果为：
<ul>
	<li>列表1</li>
	<li>列表2</li>
	<li>列表3</li>
	<li>列表4</li>
	<li>列表5</li>
</ul>，此时如果再次点击按钮，则显示为：
<ul>
	<li>列表5</li>
	<li>列表4</li>
	<li>列表3</li>
	<li>列表2</li>
	<li>列表1</li>
</ul>

$("#sort").on("click",function(){
	var list=$("#list li"),
	    arr=[],
	    str="";
	$.each(list,function(i,val){
		arr.push($(this).text().charAt(2);
	}
	if(!$(this).data("flag"){
		arr.sort(function(a,b){return a-b;});
		$(this).data("flag",ture);
	}else{
		arr.sort(function(a,b){return b-a;});
		$(this).data("flag",false);
	}
	for(var i=0;i<arr.length;i++){
		str+="<li>列表"+arr[i]+"</li>"
	}
	$("#list").empty().html(str);
	
})


7、使用jquery扩展一个对象，此对象包含setBgText和getBgText两个方法，分别用于设置和获取背景色及文本颜色。

如$('#box').setBgText({
	background:'#ccc',
	color:'#000'
})
就将这个盒子的背景设为灰色，文字颜色黑色。

$.fn.extend({

	setByText:function(settings){
		this.css(settings);
	},
	getByText:function(){
		var _this=this;
		return {
			"background":_this.style.background,
			"color":_this.style.color	
		}
	}

})

$("body").setByText({
	"background":"#ddd",
	"color":"#fff"
})

$("body").getByText();

8、什么是闭包？写一个闭包的例子。

var a=10;

function outer(){
	var b=20;
	function inner(){
		return b;
	}
	return inner;
}

console.log(outer()());  ===>20;

函数中的函数称为闭包；
在函数的外边访问局部变量时使用闭包；

9、在页面中输出 5 10 15 25 35 40 45 55

for(var i=5;i<55;i+=5){
	if(i==20 || i==30){
		continue;
	}
	document.write(i+"<br>");
}


10、将地址栏中的参数解析出来，传参数名，返回参数值
















