全局变量和局部变量
	     全局变量：在函数外部定义的变量，整个代码段都可以使用
	     局部变量：在函数内部定义的变量，只能在函数内使用

jQuery中bind  live  on的区别
	   bind(type,[data],fn)  为每个匹配元素的特定事件绑定事件处理函数  同时绑定多个事件类型
	   live(type,[data],fn)  给所有匹配的元素添加一个事件处理函数，即时是最后加进来的也有效
	   on(type,[data],fn)    在选择元素上绑定一个或多个事件处理函数
	   one(type,[data],fn)   为每一个匹配元素的特定事件，绑定一个一次性的事件处理函数	

.Array

	   方法：
		concat(array1,arrayn)将两个或两个以上的数组值连接起来，合并后返回结果
		join(string)  将数组中语速合并为字符串，string为分隔符，
		pop()  移除数组中的最后一个元素，并返回该元素
		push(value) 在数组的末尾加上一个或多个元素，返回紫的数组的长度
		reverse()  颠倒数组中元素的顺序，反向排列
		shift()    移出数组中的第一个元素并返回该元素
		splice()   为数组删除并添加新的元素


.String
		属性：constructor   所建立对象的函数参考
                      prototype      能够为对象加入的属性和方法
		      length   返回字符串的字符长度

		方法：
                     charAt( index )   返回指定索引处的字符
		     charCodeAt( index )返回一个整数，该整数表示string对象中指定位置处的字符的Unicode编码
		     indexOf（searchString,startIndex）返回字符串中第一个出现指定字符串的位置
		     replace（regex,newString） 将字符串中的某些字符替换成其他字符
 		     search（）  针对某执行值对字符串进行查找
		     slice（startIndex,endIndex）   将部分字符抽出并在新的字符串中返回剩余部分
 		     split（）  将字符串分配成数组 
		     substr(startIndex,length)   从stratIndex取，取length个字符
		     substring(startIndex.endIndex)  从stratIndex 和 endIndex之间的字符，不包括endIndex

		toLowerCase()   把字符串中的文本变成小写
		toUpperCase()   把字符串中的文本变成大写
		toSource()      显示对象的源代码
		valueOf()       返回字符串对象的原始值

递归：在过程或函数内自己调用自己的函数

	面向对象：把数据及对数据的操作方法放在一起，作为一个相互依存的整体___对象。
	面向过程：自顶向下顺序执行，逐步求精；其程序结构是按功能划分为若干个基本模块，这些模块形成一个树状结构；
	继承是00语言中一个重要的特性和概念， 接口继承和实现继承。ECMAScript只支持实现继承，继承主要靠原型链来实现。在      PHP中用 extend来实现继承，

全局变量和局部变量
	     全局变量：在函数外部定义的变量，整个代码段都可以使用
	     局部变量：在函数内部定义的变量，只能在函数内使用

JS-封装、继承、多态
	JS封装：就是尽量把使用的方式简单化，内部逻辑和使用解耦。使用的时候只需要知道参数和返回值，其他条件尽量不要使用人员进行设置。
	JS封装的方法有函数方式、对象的方式、闭包的方式。
	构造函数：是一种特殊的方法，主要用来在创建对象时初始化对象，即为对象成员变量赋初始值。总与new运算符一起使用在创建对象的语句中。
	特别的一个类可以有多个构造函数，  语句：与new运算符一起使用。
	构造函数的命名必须和类名完全相同，在java中普通函数可以和构造函数同名，但是必须带有返回值。
	JQ转DOM对象： [index]和.get(index);  DOM转JQ对象：$(DOM对象);

打包，很简单，就是把网页代码 <head></head>之间的CSS样式代码  ，拿出来 ，放在一个 .css 文件中，然后在 HEAD 中，用<link href="文件名.css" rel="text/css" />打包，很简单，就是把网页代码 <head></head>之间的CSS样式代码  ，拿出来 ，放在一个 .css 文件中，然后在 HEAD 中，用<link href="文件名.css" rel="text/css" />

闭包是什么，它有什么作用。
   答：闭包就是能够读取其他函数内部变量的函数。
   作用：1）读取函数内部的变量 。
   2）变量的值始终保持在内存中。
    父函数不能访问子函数的变量
 
原型链
在JavaScript中,一共有两种类型的值,原始值和对象值.每个对象都有一个内部属性[[prototype]],我们通常称之为原型.原型的值可以是一个对象,也可以是null.如果它的值是一个对象,则这个对象也一定有自己的原型.这样就形成了一条线性的链,我们称之为原型链


js继承有5种实现方式：
1、继承第一种方式：对象冒充
2、继承第二种方式：call()方法方式
3、继承的第三种方式：apply()方法方式
4、继承的第四种方式：原型链方式
5、继承的第五种方式：混合方式混合了call方式、原型链方式

call和apply的区别

两者实现的功能是完全一样的，只是参数传递方式不一样，call是将各个参数以逗号（,）隔开，而apply是将所有参数组成一个数组进行传递。

面向对象的方法
1.将普通方法中的 公共变量 作为对象中的 this 下面的属性（将变量换
成this的属性）
2.将具体的功能函数 以 对象.protype.方法 的形式展示
3.修改方法中this的指向

面向对象的 三大特征： 封装  继承  多态
面向对象是为了解决系统的可维护性 可扩展性 可重用性
面向对象这个对象指的是客体，所谓客体是指客观存在的对象实体和主观抽象的概念

AJAX是什么，有什么优点和缺点。
    答：Ajax就是一个页面向远程服务器发送http请求，并抓取数据，实现局部刷新。
    优点：
    1、页面无刷新，用户的体验非常好。 
    2、使用异步方式与服务器通信，具有更加迅速的响应能力。 
    3、可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。 
    4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。
    缺点：
      1、ajax不支持浏览器back按钮。   2、安全问题 AJAX暴露了与服务器交互的细节。   3、对搜索引擎的支持比较弱。   4、破坏了程序的异常机制。   5、不容易调试。

post和get的区别
(1)、Get是用来从服务器上获得数据，而Post是用来向服务器上传递数据。 
(2)、Get将表单中数据的按照variable=value的形式，添加到action所指向的URL后面，并且两者使用“?”连接，而各个变量之间使用“&”连接；Post是将表单中的数据放在form的数据体中，按照变量和值相对应的方式，传递到action所指向URL。 
(3)、Get是不安全的，因为在传输过程，数据被放在请求的URL中。Post的所有操作对用户来说都是不可见的。 
(4)、Get传输的数据量小，这主要是因为受URL长度限制(GET方式提交的数据最多只能有1024字节，而POST则没有此限制)；而Post可以传输大量的数据，所以在上传文件只能使用Post。
(5)、Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集。默认是用ISO-8859-1编码。
(6)、Get是Form的默认方法。

简述Ajax的实现步骤
要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:
(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.
(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL.
(3)设置响应HTTP请求状态变化的函数.
(4)发送HTTP请求.
(5)获取异步调用返回的数据.
(6)使用JavaScript和DOM实现局部刷新.

同步：脚本会停留并等待服务器发送回复然后再继续
异步：脚本允许页面继续其进程并处理可能的回复

ajax的原理

     Ajax原理简单的来说，通过xmlHttpRequest对象来向服务器发布异步请求，从服务器获得数据然后用javascript来操作DOM而更新页面。

jason数组
JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。

js里面的返回值有三种意思：
　　第一种情况，也是用得最多的情况，返回值是用于获取函数执行完毕后，获取到我们需要得到的结果；

　　第二种情况，就是返回空值，用来中止程序的；

　　第三种情况，用于防止事件冒泡，这种情况多在IE下生效。

split和json的区别 
	split切割成数组的形式   json将数组转换成字符串

3种强制数型转换
	强制数型转换（parseInt,parseFloat,number）

如何准确判断一个js对象是数组？
	instanceof 操作符

数组方法pop() Push() unshift() shift()
	pop() 尾部删除  Push() 尾部添加  Unshift() 头部添加  shift()  头部删除

描述parent()、parents()与closest()方法的区别，find()与filter()方法的区别
	parent(): 查找父元素
	parents()：查找祖先元素
	closest(): 从自身开始查找祖先元素，找到即刻返回
	find():查找后代元素
	filter():筛选集合中的元素

attr()  和prop()的区别
	对于HTML元素本身固有的属性，在处理时，使用prop();prop更适合设置和获取布尔型
	对于HTML元素我们自定义的DOM属性,在处理时，使用attr();

split()和join()的区别
	join() 方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。 指定分隔符方法join("#");其中#可以是任意
	split()方法：用于把一个字符串分割成字符串数组.stringObject.split(a,b)这是它的语法a是必须的决定个从a这分割b不是必须的，可选。该参数可指定返回的数组的最大长度 。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。

写出选择选择器~、>、+、““对应的四个方法
	nextAll() children() next() find()

JavaScript中settimeout与setinteval两个函数的区别？
	settimeout只执行一次，setInteval没有次数限制。

继承的两种方式？  （原型式继承、寄生式继承）

1》 对象冒充  
	
	优点  1. 可以实现多重继承  2. 可以初始化继承自父类的参数 
                缺点  1. 浪费内存资源，所有的实例都会拥有一份成员方法的副本。

2》 原型方式

	优点  1. 没有内存资源浪费，所有的成员实例的同名方法共享同一份方法代码   
                缺点    1. 不能实现多重继承  2. 不能在创建子类时初始化继承自父类的成员变量

你能解释一下JavaScript中的继承是如何工作的吗？
	子构造函数中执行父构造函数，并用call\apply改变this

请写出三种减低页面加载时间的方法
	（1）尽量减少页面中重复的HTTP请求数量
	（2）服务器开启gzip压缩
	（3）css样式的定义放置在文件头部
	（4）Javascript脚本放在文件末尾
	（5）压缩Javascript、CSS代码
	（6）Ajax采用缓存调用
	（7）尽可能减少DOM元素
	（8）使用多域名负载网页内的多个文件、图片
	（9）应用CSS Sprite

ie6中的bug:ie双边距bug,3像素问题，超链接访问过后hover样式就不出现的问题，浮动问题

都知道哪些css浏览器兼容问题：margin加倍的问题????，浮动ie产生的双倍距离，IE与宽度和高度的问题，页面的最小宽度??，.DIV浮动IE文本产生3象素的bug???，高度不适应

localstorage对象的常用方法
	setItem(),getItem(),removeItem(),clear(),key()?

简述jQuery $(document).ready()与window.onload的区别
	(1).执行时间?
????????window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。?
????????$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。
	(2).编写个数不同?
???????? window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个?
???????? $(document).ready()可以同时编写多个，并且都可以得到执行?
    	(3).简化写法?
???????? window.onload没有简化写法?
???????? $(document).ready(function(){})可以简写成$(function(){});

请指出get（），[]，eq（）的区别？
	get(),[] 返回的是DOM对象，
	eq()返回的是JQ对象

.解释jsonp的原理，
	就是利用<script>标签没有跨域限制的“漏洞”（历史遗迹啊）来达到与第三方通讯的目的。
