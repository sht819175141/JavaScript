1.创建XMLHttpRequest对象

 
Js代码  收藏代码

    function createXMLHTTPRequest() {     
                     //1.创建XMLHttpRequest对象     
                     //这是XMLHttpReuquest对象无部使用中最复杂的一步     
                     //需要针对IE和其他类型的浏览器建立这个对象的不同方式写不同的代码     
                     var xmlHttpRequest;  
                     if (window.XMLHttpRequest) {     
                         //针对FireFox，Mozillar，Opera，Safari，IE7，IE8     
                        xmlHttpRequest = new XMLHttpRequest();     
                         //针对某些特定版本的mozillar浏览器的BUG进行修正     
                         if (xmlHttpRequest.overrideMimeType) {     
                             xmlHttpRequest.overrideMimeType("text/xml");     
                         }     
                     } else if (window.ActiveXObject) {     
                         //针对IE6，IE5.5，IE5     
                         //两个可以用于创建XMLHTTPRequest对象的控件名称，保存在一个js的数组中     
                         //排在前面的版本较新     
                         var activexName = [ "MSXML2.XMLHTTP", "Microsoft.XMLHTTP" ];     
                         for ( var i = 0; i < activexName.length; i++) {     
                             try {     
                                 //取出一个控件名进行创建，如果创建成功就终止循环     
                                 //如果创建失败，回抛出异常，然后可以继续循环，继续尝试创建     
                                xmlHttpRequest = new ActiveXObject(activexName[i]);   
                                if(xmlHttpRequest){  
                                    break;  
                                }  
                             } catch (e) {     
                             }     
                         }     
                     }     
                     return xmlHttpRequest;  
                 }     

 

 2.get请求

 
Js代码  收藏代码

    function get(){  
        var req = createXMLHTTPRequest();  
        if(req){  
            req.open("GET", "http://test.com/?keywords=手机", true);  
            req.onreadystatechange = function(){  
                if(req.readyState == 4){  
                    if(req.status == 200){  
                        alert("success");  
                    }else{  
                        alert("error");  
                    }  
                }  
            }  
            req.send(null);  
        }  
    }  

 

 3.post请求

 
Js代码  收藏代码

       function post(){  
        var req = createXMLHTTPRequest();  
        if(req){  
            req.open("POST", "http://test.com/", true);  
            req.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=gbk;");     
            req.send("keywords=手机");  
            req.onreadystatechange = function(){  
                if(req.readyState == 4){  
                    if(req.status == 200){  
                        alert("success");  
                    }else{  
                        alert("error");  
                    }  
                }  
            }  
        }  
    }  

post请求需要设置请求头

 

4.    readyState与status:

         readyState有五种状态：

　　0 (未初始化)： (XMLHttpRequest)对象已经创建，但还没有调用open()方法；
　　1 (载入)：已经调用open() 方法，但尚未发送请求；
　　2 (载入完成)： 请求已经发送完成；
　　3 (交互)：可以接收到部分响应数据；
　　4 (完成)：已经接收到了全部数据，并且连接已经关闭。
如此一来，你应该就能明白readyState的功能，而status实际是一种辅状态判断，只是status更多是服务器方的状态判断。关于status，由于它的状态有几十种，我只列出平时常用的几种：
　　100――客户必须继续发出请求
　　101――客户要求服务器根据请求转换HTTP协议版本
　　200――成功
　　201――提示知道新文件的URL
　　300――请求的资源可在多处得到
　　301――删除请求数据
　　404――没有发现文件、查询或URl
　　500――服务器产生内部错误





、、、、、、、、、、、、、、、、、、、、、、
、、、、、、、、、、、、、、、、、、、、、、
 Jquery里面有一个$.ajax([options])的函数，形式如下：
、、、、、、、、、、、、、、、、、、、、、、
、、、、、、、、、、、、、、、、、、、、、、
 Jquery里面有一个$.ajax([options])的函数，形式如下：

$.ajax({
   type: "POST",
   url: "some.php",
   data: "name=John&location=Boston",
   success: function(msg){
     alert( "Data Saved: " + msg );
   }

  

代码
laycode - v1.1

个人很喜欢用这个函数，很方便。里面的可选参数很多，有一些因为没用过，不多介绍。说一下几个接下来我们涉及的参数及作用。

type:发送至服务器的请求方式，主要取值有get和post方式。

url:发送请求的地址。

data:发送请求的参数名/值对，多个以&符号连接。

dataType:希望服务器返回的数据类型，常用取值text（纯文本）、html（网页代码）、xml（xml文档）、json（json格式字符串）等。

success:服务器作出响应并返回200状态码后调用的函数（回调函数）。此函数可接收多个参数，常用为msg（变量名，可任取）,表示服务器返回的数据。

 

下面我们来用原生JS写一个具有以上五个参数的$.ajax简单版本吧。

 

首先，我们需要xhr对象。这对我们来说不难，封装成一个函数。

var createAjax = function() {
    var xhr = null;
    try {
        //IE系列浏览器
        xhr = new ActiveXObject("microsoft.xmlhttp");
    } catch (e1) {
        try {
            //非IE浏览器
            xhr = new XMLHttpRequest();
        } catch (e2) {
            window.alert("您的浏览器不支持ajax，请更换！");
        }
    }
    return xhr;
};

   
代码
laycode - v1.1

 

然后，我们来写核心函数。

var ajax = function(conf) {
    // 初始化
    //type参数,可选
    var type = conf.type;
    //url参数，必填 
    var url = conf.url;
    //data参数可选，只有在post请求时需要
    var data = conf.data;
    //datatype参数可选    
    var dataType = conf.dataType;
    //回调函数可选
    var success = conf.success;
                                                                                         
    if (type == null){
        //type参数可选，默认为get
        type = "get";
    }
    if (dataType == null){
        //dataType参数可选，默认为text
        dataType = "text";
    }
    // 创建ajax引擎对象
    var xhr = createAjax();
    // 打开
    xhr.open(type, url, true);
    // 发送
    if (type == "GET" || type == "get") {
        xhr.send(null);
    } else if (type == "POST" || type == "post") {
        xhr.setRequestHeader("content-type",
                    "application/x-www-form-urlencoded");
        xhr.send(data);
    }
    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
            if(dataType == "text"||dataType=="TEXT") {
                if (success != null){
                    //普通文本
                    success(xhr.responseText);
                }
            }else if(dataType=="xml"||dataType=="XML") {
                if (success != null){
                    //接收xml文档    
                    success(xhr.responseXML);
                }  
            }else if(dataType=="json"||dataType=="JSON") {
                if (success != null){
                    //将json字符串转换为js对象  
                    success(eval("("+xhr.responseText+")"));
                }
            }
        }
    };
};

代码
laycode - v1.1

 

最后，说明一下此函数的用法。

ajax({
    type:"post",
    url:"test.jsp",
    data:"name=dipoo&info=good",
    dataType:"json",
    success:function(data){
        alert(data.name);
    }
});

 

代码
laycode - v1.1

五个参数只有url是必选的；type，dataType具有默认值，并且type的取值只能为post/get或其大写形式，dataType的取值只能为text/xml/json或其大写形式；而当type为get或者已经在url后附带参数则不用指定data；success为回调函数，按需求或写或不写。

哦，原来我们也可以为自己定制一个好用而简单的方法！