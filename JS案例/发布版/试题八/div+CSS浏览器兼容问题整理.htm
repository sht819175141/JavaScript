<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>div+CSS浏览器兼容问题整理(IE6.0、IE7.0 ,ie8 , FireFox.. - 心随灵动 - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=gdNkSiQMyBMkpTeO1ex9qW-60UbMszQItnCUpBAT3LQ1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="http://common.cnblogs.com/Skins/coffee/style.css?id=20140415"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/myitm/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/myitm/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/myitm/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'myitm', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=FOqefevqBjUaRBgJ34ZQl1EApcqAM1lL_5hz2epjncA1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/myitm/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/myitm/">You Know ,I Can Do it .</a></h1>
<h2>没有比人更高的山，没用比脚更长的路！</h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<!--done-->
			<ul id="navList">
				<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
				<li><a id="MyLinks1_IngLink" class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
				<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/myitm/">首页</a></li>
				<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
				<li><a id="MyLinks1_ContactLink" accesskey="9" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/%e5%bf%83%e9%9a%8f%e7%81%b5%e5%8a%a8">联系</a></li>
				<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
				<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/myitm/rss">订阅</a>
				<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/myitm/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a></li>
			</ul>


			<div class="blogStats">
				
				
<!--done-->
随笔- 193&nbsp;
文章- 0&nbsp;
评论- 81&nbsp;

				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		

<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/myitm/archive/2011/05/17/2048850.html">div+CSS浏览器兼容问题整理(IE6.0、IE7.0 ,ie8 , FireFox..</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><h3 class="title pre fs1"><strong><span color="#aa0022" style="color: #aa0022;">CSS技巧<br /><br /></span>1.div的垂直居中问题<br /><br /></strong>vertical-align:middle; 将行距增加到和整个DIV一样高 line-height:200px; 然后插入文字，就垂直居中了。缺点是要控制内容不要换行&nbsp;&nbsp; powered by 25175.<a title="25175.net网站" href="http://www.25175.net/">net</a><br /><br /><strong>2. margin加倍的问题<br /></strong>&nbsp;&nbsp;&nbsp;&nbsp;<br />设置为float的div在ie下设置的margin会加倍。这是一个ie6都存在的bug。解决方案是在这个div里面加上display:inline;&nbsp;&nbsp;&nbsp;&nbsp;<br />例如：&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;#div id=&rdquo;imfloat&rdquo;&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />相应的css为&nbsp;&nbsp;&nbsp;&nbsp;<br />#IamFloat{&nbsp;&nbsp;&nbsp;&nbsp;<br />float:left;&nbsp;&nbsp;&nbsp;&nbsp;<br />margin:5px;/*IE下理解为10px*/&nbsp;&nbsp;&nbsp;&nbsp;<br />display:inline;/*IE下再理解为5px*/}&nbsp;&nbsp;&nbsp;<br /><br /><strong>3.浮动ie产生的双倍距离<br /></strong>&nbsp;&nbsp;&nbsp;&nbsp;<br />#box{ float:left; width:100px; margin:0 0 0 100px; //这种情况之下IE会产生200px的距离 display:inline; //使浮动忽略}&nbsp;&nbsp;&nbsp;&nbsp;<br />这里细说一下block与inline两个元素：block元素的特点是,总是在新行上开始,高度,宽度,行高,边距都可以控制(块元素);Inline元素的特点是,和其他元素在同一行上,不可控制(内嵌元素);&nbsp;&nbsp;&nbsp;&nbsp;<br />#box{ display:block; //可以为内嵌元素模拟为块元素 display:inline; //实现同一行排列的效果 diplay:table;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><strong>4 IE与宽度和高度的问题</strong>&nbsp;<br /><br />IE 不认得min-这个定义，但实际上它把正常的width和height当作有min的情况来使。这样问题就大了，如果只用宽度和高度，正常的浏览器里这两 个值就不会变，如果只用min-width和min-height的话，IE下面根本等于没有设置宽度和高度。&nbsp;&nbsp;&nbsp;&nbsp;<br />比如要设置背景图片，这个宽度是比较重要的。要解决这个问题，可以这样：&nbsp;&nbsp;&nbsp;&nbsp;<br />#box{ width: 80px; height: 35px;}html&gt;body #box{ width: auto; height: auto; min-width: 80px; min-height: 35px;}&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><strong>5.页面的最小宽度<br /></strong>&nbsp;&nbsp;&nbsp;&nbsp;<br />min -width是个非常方便的CSS命令，它可以指定元素最小也不能小于某个宽度，这样就能保证排版一直正确。但IE不认得这个，而它实际上把width当 做最小宽度来使。为了让这一命令在IE上也能用，可以把一个&lt;div&gt; 放到 &lt;body&gt; 标签下，然后为div指定一个类, 然后CSS这样设计：&nbsp;&nbsp;&nbsp;&nbsp;<br />#container{ min-width: 600px; width:expression(document.body.clientWidth &lt; 600? "600px": "auto" );}&nbsp;&nbsp;&nbsp;&nbsp;<br />第一个min-width是正常的；但第2行的width使用了Javascript，这只有IE才认得，这也会让你的HTML文档不太正规。它实际上通过Javascript的判断来实现最小宽度。&nbsp;&nbsp;&nbsp;<br /><br /><strong>6.DIV浮动IE文本产生3象素的bug</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />左边对象浮动，右边采用外补丁的左边距来定位，右边对象内的文本会离左边有3px的间距.&nbsp;&nbsp;&nbsp;&nbsp;<br />#box{ float:left; width:800px;}&nbsp;&nbsp;&nbsp;<br />#left{ float:left; width:50%;}&nbsp;&nbsp;&nbsp;<br />#right{ width:50%;}&nbsp;&nbsp;&nbsp;<br />*html #left{ margin-right:-3px; //这句是关键}&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;div id="box"&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id="left"&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id="right"&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br /><br /><strong>7.IE捉迷藏的问题</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />当div应用复杂的时候每个栏中又有一些链接，DIV等这个时候容易发生捉迷藏的问题。&nbsp;&nbsp;&nbsp;&nbsp;<br />有些内容显示不出来，当鼠标选择这个区域是发现内容确实在页面。 解决办法：对#layout使用line-height属性 或者给#layout使用固定高和宽。页面结构尽量简单。&nbsp;&nbsp;&nbsp;<br /><br /><strong>8.float的div闭合;清除浮动;自适应高度;</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />① 例如：&lt;#div id=&rdquo;floatA&rdquo; &gt;&lt;#div id=&rdquo;floatB&rdquo; &gt;&lt;#div id=&rdquo; NOTfloatC&rdquo; &gt;这里的NOTfloatC并不希望继续平移，而是希望往下排。(其中floatA、floatB的属性已经设置为 float:left;)&nbsp;&nbsp;&nbsp;<br />这段代码在IE中毫无问题，问题出在FF。原因是NOTfloatC并非float标签，必须将float标签 闭合。在 &lt;#div class=&rdquo;floatB&rdquo;&gt; &lt;#div class=&rdquo;NOTfloatC&rdquo;&gt;之间加上 &lt; #div class=&rdquo;clear&rdquo;&gt;这个div一定要注意位置，而且必须与两个具有float属性的div同级，之间不能存在嵌套关系，否则会 产生异常。 并且将clear这种样式定义为为如下即可： .clear{ clear:both;}&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />②作为外部 wrapper 的 div 不要定死高度,为了让高度能自动适应，要在wrapper里面加上overflow:hidden; 当包含float的 box的时候，高度自动适应在IE下无效，这时候应该触发IE的layout私有属性(万恶的IE啊！)用zoom:1;可以做到，这样就达到了兼容。 &nbsp;&nbsp;&nbsp;<br />例如某一个wrapper如下定义：&nbsp;&nbsp;&nbsp;&nbsp;<br />.colwrapper{ overflow:hidden; zoom:1; margin:5px auto;}&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />③对于排版,我们用得最多的css描述可能就是float:left.有的时候我们需要在n栏的float div后面做一个统一的背景,譬如:&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;page&rdquo;&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;left&rdquo;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;center&rdquo;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;right&rdquo;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />比 如我们要将page的背景设置成蓝色,以达到所有三栏的背景颜色是蓝色的目的,但是我们会发现随着left center right的向下拉长,而 page居然保存高度不变,问题来了,原因在于page不是float属性,而我们的page由于要居中,不能设置成float,所以我们应该这样解决 &nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;page&rdquo;&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;bg&rdquo; style=&rdquo;float:left;width:100%&rdquo;&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;left&rdquo;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;center&rdquo;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;div id=&rdquo;right&rdquo;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />&lt;/div&gt;&nbsp;&nbsp;&nbsp;<br />再嵌入一个float left而宽度是100%的DIV解决之&nbsp;&nbsp;&nbsp;<br /><br />④万能float 闭合(非常重要!)&nbsp;&nbsp;&nbsp;&nbsp;<br />关 于 clear float 的原理可参见 [How To Clear Floats Without Structural Markup],将以下 代码加入Global CSS 中,给需要闭合的div加上 class="clearfix" 即可,屡试不爽.&nbsp;&nbsp;&nbsp;&nbsp;<br />/* Clear Fix */&nbsp;&nbsp;&nbsp;&nbsp;<br />.clearfix:after { content:"."; display:block; height:0; clear:both; visibility:hidden; }&nbsp;&nbsp;&nbsp;&nbsp;<br />.clearfix { display:inline-block; }&nbsp;&nbsp;&nbsp;&nbsp;<br />/* Hide from IE Mac */&nbsp;&nbsp;&nbsp;&nbsp;<br />.clearfix {display:block;}&nbsp;&nbsp;&nbsp;&nbsp;<br />/* End hide from IE Mac */&nbsp;&nbsp;&nbsp;&nbsp;<br />/* end of clearfix */&nbsp;&nbsp;&nbsp;&nbsp;<br />或者这样设置：.hackbox{ display:table; //将对象作为块元素级的表格显示}&nbsp;&nbsp;&nbsp;<br /><br /><strong>11.高度不适应</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />高度不适应是当内层对象的高度发生变化时外层高度不能自动进行调节，特别是当内层对象使用margin 或paddign 时。&nbsp;&nbsp;&nbsp;&nbsp;<br />例：&nbsp;&nbsp;&nbsp;<br />#box {background-color:#eee; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />#box p {margin-top: 20px;margin-bottom: 20px; text-align:center; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;div id="box"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;p&gt;p对象中的内容&lt;/p&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />解决方法：在P对象上下各加2个空的div对象CSS代码：.1{height:0px;overflow:hidden;}或者为DIV加上border属性。<br /><br /><strong>12 .IE6下为什么图片下有空隙产生</strong>&nbsp;<br /><br />解 决这个BUG的方法也有很多,可以是改变html的排版,或者设置img 为display:block 或者设置vertical-align 属性为 vertical-align:top | bottom |middle |text-bottom 都可以解决.&nbsp;<br /><br /><strong>13.如何对齐文本与文本输入框</strong>&nbsp;<br /><br />加上 vertical-align:middle;&nbsp;<br />&lt;style type="text/css"&gt;&nbsp;<br />&lt;!--&nbsp;<br />input {&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; width:200px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; height:30px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; border:1px solid red;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; vertical-align:middle;&nbsp;<br />}&nbsp;<br />--&gt;&nbsp;<br />&lt;/style&gt;<br /><br /><strong>14.web标准中定义id与class有什么区别吗</strong>&nbsp;<br /><br />一.web标准中是不容许重复ID的,比如 div id="aa"&nbsp;&nbsp; 不容许重复2次,而class 定义的是类,理论上可以无限重复, 这样需要多次引用的定义便可以使用他.&nbsp;<br /><br />二.属性的优先级问题&nbsp;<br />ID 的优先级要高于class,看上面的例子&nbsp;<br /><br />三.方便JS等客户端脚本,如果在页面中要对某个对象进行脚本操作,那么可以给他定义一个ID,否则只能利用遍历页面元素加上指定特定属性来找到它,这是相对浪费时间资源,远远不如一个ID来得简单.&nbsp;<br /><br /><strong>15. LI中内容超过长度后以省略号显示的方法</strong>&nbsp;<br /><br />此方法适用与IE与OP浏览器&nbsp;<br /><br />&lt;style type="text/css"&gt;&nbsp;<br />&lt;!--&nbsp;<br />li {&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; width:200px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; white-space:nowrap;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; text-overflow:ellipsis;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; -o-text-overflow:ellipsis;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; overflow: hidden;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br /><br />--&gt;&nbsp;<br />&lt;/style&gt;<br /><br /><strong>16.为什么web标准中IE无法设置滚动条颜色了</strong>&nbsp;<br /><br />解决办法是将body换成html&nbsp;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;&nbsp;<br />&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;&nbsp;<br />&lt;style type="text/css"&gt;&nbsp;<br />&lt;!--&nbsp;<br />html {&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; scrollbar-face-color:#f6f6f6;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; scrollbar-highlight-color:#fff;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; scrollbar-shadow-color:#eeeeee;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; scrollbar-3dlight-color:#eeeeee;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; scrollbar-arrow-color:#000;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; scrollbar-track-color:#fff;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; scrollbar-darkshadow-color:#fff;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br />--&gt;&nbsp;<br />&lt;/style&gt;&nbsp;<br /><br /><strong>17.为什么无法定义1px左右高度的容器</strong>&nbsp;<br /><br />IE6下这个问题是因为默认的行高造成的,解决的方法也有很多,例如:overflow:hidden | zoom:0.08 | line-height:1px<br /><br /><strong>18.怎么样才能让层显示在FLASH之上呢</strong>&nbsp;<br /><br />解决的办法是给FLASH设置透明&nbsp;<br />&lt;param name="wmode" value="transparent" /&gt;<br /><br /><strong>19.怎样使一个层垂直居中于浏览器中</strong>&nbsp;<br /><br />这里我们使用百分比绝对定位,与外补丁负值的方法,负值的大小为其自身宽度高度除以二&nbsp;<br />&lt;style type="text/css"&gt;&nbsp;<br />&lt;!--&nbsp;<br />div {&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; position:absolute;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; top:50%;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; lef:50%;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; margin:-100px 0 0 -100px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; width:200px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; height:200px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; border:1px solid red;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br />--&gt;&nbsp;<br />&lt;/style&gt;&nbsp;<br /><br />
<div id="BodyLabel"><strong><span color="#aa0022" style="color: #aa0022;">FF与IE</span></strong>&nbsp;&nbsp;&nbsp;<br /><br /><strong>1. Div居中问题</strong>&nbsp;&nbsp; powered by 25175.<a title="25175.net网站" href="http://www.25175.net/">net</a><br /><br />div设置 margin-left, margin-right 为 auto 时已经居中，IE 不行，IE需要设定body居中，首先在父级元素定义text-algin: center;这个的意思就是在父级元素内的内容居中。&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><strong>2.链接(a标签)的边框与背景</strong>&nbsp;&nbsp;&nbsp;<br /><br />a 链接加边框和背景色，需设置 display: block, 同时设置 float: left 保证不换行。参照 menubar, 给 a 和 menubar 设置高度是为了避免底边显示错位, 若不设 height, 可以在 menubar 中插入一个空格。<br /><br /><strong>3.超链接访问过后hover样式就不出现的问题</strong>&nbsp;<br /><br />被点击访问过的超链接样式不在具有hover和active了,很多人应该都遇到过这个问题,解决方法是改变CSS属性的排列顺序: L-V-H-A&nbsp;<br />Code:&nbsp;<br />&lt;style type="text/css"&gt;&nbsp;<br />&lt;!--&nbsp;<br />a:link {}&nbsp;<br />a:visited {}&nbsp;<br />a:hover {}&nbsp;<br />a:active {}&nbsp;<br />--&gt;&nbsp;<br />&lt;/style&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><strong>4. 游标手指cursor</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />cursor: pointer 可以同时在 IE FF 中显示游标手指状， hand 仅 IE 可以&nbsp;&nbsp;&nbsp;<br /><br /><strong>5.UL的padding与margin</strong>&nbsp;&nbsp;&nbsp;<br /><br />ul标签在FF中默认是有padding值的,而在IE中只有margin默认有值,所以先定义 ul{margin:0;padding:0;}就能解决大部分问题&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><strong>6. FORM标签</strong>&nbsp;&nbsp;&nbsp;<br /><br />这 个标签在IE中,将会自动margin一些边距,而在FF中margin则是0,因此,如果想显示一致,所以最好在css中指定margin和 padding,针对上面两个问题,我的css中一般首先都使用这样的样式ul,form{margin:0;padding:0;}给定义死了,所以后 面就不会为这个头疼了.&nbsp;&nbsp;&nbsp;<br /><br /><strong>7. BOX模型解释不一致问题</strong>&nbsp;&nbsp;&nbsp;<br /><br />在FF和IE 中的BOX模型解释不一致导致相差2px解决方法：div{margin:30px!important;margin:28px;} 注意这两个 margin的顺序一定不能写反， important这个属性IE不能识别，但别的浏览器可以识别。所以在IE下其实解释成这样： div {maring:30px;margin:28px}重复定义的话按照最后一个来执行，所以不可以只写margin:xx px!important; &nbsp;&nbsp;&nbsp;&nbsp;<br />#box{ width:600px; //for ie6.0- w\idth:500px; //for ff+ie6.0}&nbsp;&nbsp;&nbsp;&nbsp;<br />#box{ width:600px!important //for ff width:600px; //for ff+ie6.0 width /**/:500px; //for ie6.0-}&nbsp;&nbsp;&nbsp;<br /><br /><strong>8.属性选择器(这个不能算是兼容,是隐藏css的一个bug)</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />p[id]{}div[id]{}&nbsp;&nbsp;&nbsp;&nbsp;<br />这个对于IE6.0和IE6.0以下的版本都隐藏,FF和OPera作用.属性选择器和子选择器还是有区别的,子选择器的范围从形式来说缩小了,属性选择器的范围比较大,如p[id]中,所有p标签中有id的都是同样式的.&nbsp;&nbsp;&nbsp;<br /><br /><strong>9.最狠的手段 - !important;</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />如果实在没有办法解决一些细节问题,可以用这个方法.FF对于&rdquo;!important&rdquo;会自动优先解析,然而IE则会忽略.如下&nbsp;&nbsp;&nbsp;<br />.tabd1{&nbsp;&nbsp;&nbsp;&nbsp;<br />background:url(/res/images/up/tab1.gif) no-repeat 0px 0px !important; /*Style for FF*/&nbsp;&nbsp;&nbsp;&nbsp;<br />background:url(/res/images/up/tab1.gif) no-repeat 1px 0px; /* Style for IE */}&nbsp;&nbsp;&nbsp;<br />值得注意的是，一定要将xxxx !important 这句放置在另一句之上，上面已经提过&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><strong>10.IE,FF的默认值问题</strong>&nbsp;&nbsp;&nbsp;<br /><br />或 许你一直在抱怨为什么要专门为IE和FF写不同的CSS，为什么IE这样让人头疼，然后一边写css，一边咒骂那个可恶的M$ IE.其实对于css的标 准支持方面，IE并没有我们想象的那么可恶，关键在于IE和FF的默认值不一样而已，掌握了这个技巧，你会发现写出兼容FF和IE的css并不是那么困 难，或许对于简单的css，你完全可以不用&rdquo;!important&rdquo;这个东西了。&nbsp;&nbsp;&nbsp;&nbsp;<br />我们都知道，浏览器在显示网页的时候，都会根据网页的 css样式表来决定如何显示，但是我们在样式表中未必会将所有的元素都进行了具体的描述，当然也没有必要那么做，所以对于那些没有描述的属性，浏览器将采 用内置默认的方式来进行显示，譬如文字，如果你没有在css中指定颜色，那么浏览器将采用黑色或者系统颜色来显示，div或者其他元素的背景，如果在 css中没有被指定，浏览器则将其设置为白色或者透明，等等其他未定义的样式均如此。所以有很多东西出现FF和IE显示不一样的根本原因在于它们的默认显 示不一样，而这个默认样式该如何显示我知道在w3中有没有对应的标准来进行规定，因此对于这点也就别去怪罪IE了。<br /><br /><strong>11.为什么FF下文本无法撑开容器的高度</strong>&nbsp;<br /><br />标准浏览器中固定高度值的容器是不会象IE6里那样被撑开的,那我又想固定高度,又想能被撑开需要怎样设置呢？办法就是去掉height设置min-height:200px;&nbsp;&nbsp; 这里为了照顾不认识min-height的IE6 可以这样定义:&nbsp;<br /><br />{&nbsp;<br />height:auto!important;&nbsp;<br />height:200px;&nbsp;<br />min-height:200px;&nbsp;<br />}&nbsp;<br /><br /><strong>12.FireFox下如何使连续长字段自动换行</strong>&nbsp;<br /><br />众所周知IE中直接使用 word-wrap:break-word 就可以了, FF中我们使用JS插入&amp;#10;的方法来解决&nbsp;<br /><br />&lt;style type="text/css"&gt;&nbsp;<br />&lt;!--&nbsp;<br />div {&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; width:300px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; word-wrap:break-word;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; border:1px solid red;&nbsp;<br />}&nbsp;<br />--&gt;&nbsp;<br />&lt;/style&gt;&nbsp;<br /><br />&lt;div id="ff"&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/div&gt;&nbsp;<br /><br />&lt;scrīpt type="text/javascrīpt"&gt;&nbsp;<br />/* &lt;![CDATA[ */&nbsp;<br />function toBreakWord(el, intLen){&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; var ōbj=document.getElementById(el);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; var strContent=obj.innerHTML;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; var strTemp="";&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; while(strContent.length&gt;intLen){&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strTemp+=strContent.substr(0,intLen)+"&amp;#10;";&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strContent=strContent.substr(intLen,strContent.length);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; strTemp+="&amp;#10;"+strContent;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; obj.innerHTML=strTemp;&nbsp;<br />}&nbsp;<br />if(document.getElementById&nbsp;&nbsp; &amp;&amp;&nbsp;&nbsp; !document.all)&nbsp;&nbsp; toBreakWord("ff", 37);&nbsp;<br />/* ]]&gt; */&nbsp;<br />&lt;/scrīpt&gt;<br /><br /><strong>13.为什么IE6下容器的宽度和FF解释不同呢</strong>&nbsp;<br /><br />&lt;?xml version="1.0" encoding="gb2312"?&gt;&nbsp;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;&nbsp;<br />&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;&nbsp;<br />&lt;style type="text/css"&gt;&nbsp;<br />&lt;!--&nbsp;<br />div {&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; cursor:pointer;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; width:200px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; height:200px;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; border:10px solid red&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;<br />--&gt;&nbsp;<br />&lt;/style&gt;&nbsp;<br />&lt;div ōnclick="alert(this.offsetWidth)"&gt;让FireFox与IE兼容&lt;/div&gt;&nbsp;<br /><br />问 题的差别在于容器的整体宽度有没有将边框（border）的宽度算在其内,这里IE6解释为200PX ,而FF则解释为220PX,那究竟是怎么导致的 问题呢？大家把容器顶部的xml去掉就会发现原来问题出在这,顶部的申明触发了IE的qurks mode,关于qurks mode、 standards mode的相关知识<br /><br />powered by 25175.<a title="25175.net网站" href="http://www.25175.net/">net</a><strong><span color="#aa0022" style="color: #aa0022;">IE6,IE7,FF</span></strong>&nbsp;&nbsp;&nbsp;<br /><br />IE7.0 出来了，对CSS的支持又有新问题。浏览器多了，网页兼容性更差了，疲于奔命的还是我们 ，为解决IE7.0的兼容问题，找来了下面这篇文章： 现在我大 部分都是用!important来hack，对于ie6和firefox测试可以正常显示，但是ie7对!important可以正确解释，会导致页面没 按要求显示！下面是三个浏览器的兼容性收集.&nbsp;&nbsp;&nbsp;<br /><br /><strong>第一种，是CSS HACK的方法</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />height:20px; /*For Firefox*/&nbsp;&nbsp;&nbsp;&nbsp;<br />*height:25px; /*For IE7 &amp; IE6*/&nbsp;&nbsp;&nbsp;&nbsp;<br />_height:20px; /*For IE6*/&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />注意顺序。&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />这样也属于CSS HACK，不过没有上面这样简洁。&nbsp;&nbsp;&nbsp;&nbsp;<br />#example { color: #333; } /* Moz */&nbsp;&nbsp;&nbsp;&nbsp;<br />* html #example { color: #666; } /* IE6 */&nbsp;&nbsp;&nbsp;&nbsp;<br />*+html #example { color: #999; } /* IE7 */&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><br /><strong>第二种，是使用IE专用的条件注释</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />&lt;!--其他浏览器 --&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;link rel="stylesheet" type="text/css" href="http://cgxcn.blog.163.com/blog/http://www.cnblogs.com/../css.css" /&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />&lt;!--[if IE 7]&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;!-- 适合于IE7 --&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;link rel="stylesheet" type="text/css" href="http://cgxcn.blog.163.com/blog/http://www.cnblogs.com/../ie7.css" /&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;![endif]--&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />&lt;!--[if lte IE 6]&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;!-- 适合于IE6及一下 --&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;link rel="stylesheet" type="text/css" href="http://cgxcn.blog.163.com/blog/http://www.cnblogs.com/../ie.css" /&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;![endif]--&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br /><strong>第三种，css filter的办法，以下为经典从国外网站翻译过来的。.</strong>&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />新建一个css样式如下：&nbsp;&nbsp;&nbsp;&nbsp;<br />#item {&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; width: 200px;&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; height: 200px;&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; background: red;&nbsp;&nbsp;&nbsp;&nbsp;<br />}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />新建一个div,并使用前面定义的css的样式：&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;div id="item"&gt;some text here&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />在body表现这里加入lang属性,中文为zh：&nbsp;&nbsp;&nbsp;&nbsp;<br />&lt;body lang="en"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />现在对div元素再定义一个样式：&nbsp;&nbsp;&nbsp;&nbsp;<br />*:lang(en) #item{&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; background:green !important;&nbsp;&nbsp;&nbsp;&nbsp;<br />}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />这样做是为了用!important覆盖原来的css样式,由于:lang选择器ie7.0并不支持,所以对这句话不会有任何作用,于是也达到了ie6.0下同样的效果,但是很不幸地的是,safari同样不支持此属性,所以需要加入以下css样式：&nbsp;&nbsp;&nbsp;&nbsp;<br />#item:empty {&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp; background: green !important&nbsp;&nbsp;&nbsp;&nbsp;<br />}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />:empty选择器为css3的规范,尽管safari并不支持此规范,但是还是会选择此元素,不管是否此元素存在,现在绿色会现在在除ie各版本以外的浏览器上。&nbsp;&nbsp;&nbsp;&nbsp;<br /><br />对IE6和FF的兼容可以考虑以前的!important 个人比较喜欢用第一种，简洁，兼容性比较好<br /><br />
<div id="BodyLabel">什么是浏览器HACK：当我们使用不同的浏览器（Firefox IE7 IE6）访问同一个网站，或者页面的时候，会出现一些不兼容的问题，有的显示出来正常，有的显示出来不正常，我们在编写CSS的时候会很恼火，刚修复了这个浏览器的问题，结果另外一个浏览器却出了新问题。而HACK就是一种办法，能让你在一个CSS里面独立的写支持不同浏览器的样式。这下就和谐了。呵呵！powered by 25175.<a title="25175.net网站" href="http://www.25175.net/">net</a><br /><br />最近微软发布的IE7浏览器的兼容性确实给一些网页制作人员添加了一个沉重的负担，虽然IE7已经走向标准化，但还是有许多和FF不同的地方，所以需要用到IE7的HACK，有许多朋友问过IE7的HACK是什么，其实我也不知道。暂时还没找到IE7专用的HACK。除了前面那片文章，《针对firefox ie6 ie7的css样式》中的hack方式也是很好用的。<br /><br />有一点逻辑思想的人都会知道可以用IE和FF的HACK结合起来使用，下面介绍三个HACK，例如：（适合新手，呵呵，高手就在这里路过吧。）<br /><br />程序代码<br /><br />第一个HACK，IE FF 所有浏览器 公用（其实也不算是HACK）<br />height:100px;<br />第二个HACK IE6专用<br />_height:100px;<br />第三个HACK IE6 IE7公用<br />*height:100px;<br /><br />介绍完了这三个HACK了，下面我们再来看看如何在一个样式里分别给一个属性定义IE6 IE7 FF专用的HACK，看下面的代码，顺序不能错哦：<br /><br />程序代码<br /><br />height:100px;<br />*height:120px;<br />_height:150px;<br /><br />下面我简单解释一下各浏览器怎样理解这三个属性：<br /><br />在FF下，第2、3个属性FF不认识，所以它读的是 height:100px;<br /><br />在IE7下，第三个属性IE7不认识，所以它读第1、2个属性，又因为第二个属性覆盖了第一个属性，所以IE7最终读出的是第2个属性 *height:120px;<br /><br />在IE6下，三个属性IE6都认识，所以三个属性都可以读取，又因为第三个属性覆盖掉前2个属性，所以IE6最终读取的是第三个属性。<br /><br /><br /><br /><br /><br />1 针对firefox ie6 ie7的css样式<br /><br />现在大部分都是用!important来hack，对于ie6和firefox测试可以正常显示，但是ie7对!important可以正确解释，会导致页面没按要求显示！找到一个针对IE7不错的hack方式就是使用&ldquo;*+html&rdquo;，现在用IE7浏览一下，应该没有问题了现在写一个CSS可以这样：<br /><br />#1 { color: #333; } /* Moz */<br />* html #1 { color: #666; } /* IE6 */<br />*+html #1 { color: #999; } /* IE7 */<br /><br /><br />那么在firefox下字体颜色显示为#333，IE6下字体颜色显示为#666，IE7下字体颜色显示为#999。<br /><br />2 css布局中的居中问题<br /><br />主要的样式定义如下：<br /><br />body {TEXT-ALIGN: center;}<br />#center { MARGIN-RIGHT: auto; MARGIN-LEFT: auto; }<br /><br />说明：<br /><br />首先在父级元素定义TEXT-ALIGN: center;这个的意思就是在父级元素内的内容居中；对于IE这样设定就已经可以了。<br /><br />但在mozilla中不能居中。解决办法就是在子元素定义时候设定时再加上&ldquo;MARGIN-RIGHT: auto;MARGIN-LEFT: auto; &rdquo;<br /><br />需要说明的是，如果你想用这个方法使整个页面要居中，建议不要套在一个DIV里，你可以依次拆出多个div，只要在每个拆出的div里定义MARGIN-RIGHT: auto;MARGIN-LEFT: auto; 就可以了。<br /><br />3 盒模型不同解释.<br /><br />#box{<br />width:600px;<br />//for ie6.0- w\idth:500px;<br />//for ff+ie6.0<br />}<br />#box{<br />width:600px!important<br />//for ff<br />width:600px;<br />//for ff+ie6.0<br />width /**/:500px;<br />//for ie6.0-<br />}<br /><br />4 浮动ie产生的双倍距离<br /><br />#box{ float:left; width:100px; margin:0 0 0 100px; //这种情况之下IE会产生200px的距离 display:inline; //使浮动忽略}<br /><br />这里细说一下block,inline两个元素,Block元素的特点是:总是在新行上开始,高度,宽度,行高,边距都可以控制(块元素);Inline元素的特点是:和其他元素在同一行上,&hellip;不可控制(内嵌元素);<br /><br />#box{ display:block; //可以为内嵌元素模拟为块元素 display:inline; //实现同一行排列的的效果 diplay:table;<br /><br />5 IE与宽度和高度的问题<br /><br />IE不认得min-这个定义，但实际上它把正常的width和height当作有min的情况来使。这样问题就大了，如果只用宽度和高度，正常的浏览器里这两个值就不会变，如果只用min-width和min-height的话，IE下面根本等于没有设置宽度和高度。比如要设置背景图片，这个宽度是比较重要的。要解决这个问题，可以这样：<br /><br />#box{ width: 80px; height: 35px;}html&gt;body #box{ width: auto; height: auto; min-width: 80px; min-height: 35px;}<br /><br />6 页面的最小宽度<br /><br />min-width是个非常方便的CSS命令，它可以指定元素最小也不能小于某个宽度，这样就能保证排版一直正确。但IE不认得这个，而它实际上把 width当做最小宽度来使。为了让这一命令在IE上也能用，可以把一个&lt;div&gt; 放到 &lt;body&gt; 标签下，然后为div指定一个类：<br />然后CSS这样设计：<br /><br />#container{<br />min-width: 600px;<br />width:e?xpression(document.body.clientWidth &lt; 600? &ldquo;600px&rdquo;: &ldquo;auto&rdquo; );<br />}<br /><br />第一个min-width是正常的；但第2行的width使用了Javascript，这只有IE才认得，这也会让你的HTML文档不太正规。它实际上通过Javascript的判断来实现最小宽度。<br /><br />7 清除浮动<br /><br />.hackbox{<br />display:table;<br />//将对象作为块元素级的表格显示<br />}<br /><br />或者<br /><br />.hackbox{<br />clear:both;<br />}<br /><br />或者加入:after（伪对象）,设置在对象后发生的内容，通常和content配合使用，IE不支持此伪对象，非Ie 浏览器支持，所以并不影响到IE/WIN浏览器。这种的最麻烦的<br /><br />&hellip;&hellip;#box:after{<br />content: &ldquo;.&rdquo;;<br />display: block;<br />height: 0;<br />clear: both;<br />visibility: hidden;<br />}<br /><br />8 DIV浮动IE文本产生3象素的bug<br /><br />左边对象浮动，右边采用外补丁的左边距来定位，右边对象内的文本会离左边有3px的间距.<br /><br />#box{<br />float:left;<br />width:800px;}<br />#left{<br />float:left;<br />width:50%;}<br />#right{<br />width:50%;<br />}<br />*html #left{<br />margin-right:-3px;<br />//这句是关键<br />}<br />HTML代码<br />&lt;DIV id=box&gt;<br />&lt;DIV id=left&gt;&lt;/DIV&gt;<br />&lt;DIV id=right&gt;&lt;/DIV&gt;<br />&lt;/DIV&gt;<br /><br />9 属性选择器(这个不能算是兼容,是隐藏css的一个bug)<br /><br />p[id]{}div[id]{}<br />p[id]{}div[id]{}<br /><br />这个对于IE6.0和IE6.0以下的版本都隐藏,FF和OPera作用<br /><br />属性选择器和子选择器还是有区别的,子选择器的范围从形式来说缩小了,属性选择器的范围比较大,如p[id]中,所有p标签中有id的都是同样式的.<br /><br />10 IE捉迷藏的问题<br /><br />当div应用复杂的时候每个栏中又有一些链接，DIV等这个时候容易发生捉迷藏的问题。<br />有些内容显示不出来，当鼠标选择这个区域是发现内容确实在页面。<br />解决办法：对#layout使用line-height属性 或者给#layout使用固定高和宽。页面结构尽量简单。<br /><br />11 高度不适应<br /><br />高度不适应是当内层对象的高度发生变化时外层高度不能自动进行调节，特别是当内层对象使用<br />margin 或paddign 时。例：<br /><br />&lt;div id=&rdquo;box&rdquo;&gt;<br />&lt;p&gt;p对象中的内容&lt;/p&gt;<br />&lt;/div&gt;<br /><br />CSS：<br /><br />#box {background-color:#eee; }<br />#box p {margin-top: 20px;margin-bottom: 20px; text-align:center; }<br /><br />解决方法：在P对象上下各加2个空的div对象CSS代码：.1{height:0px;overflow:hidden;}或者为DIV加上border属性。<br /><br /><br /><br /><br /><br />屏蔽IE浏览器（也就是IE下不显示）<br />*:lang(zh) select {font:12px !important;} /*FF,OP可见*/<br />select:empty {font:12px !important;} /*safari可见*/<br />这里select是选择符，根据情况更换。第二句是MAC上safari浏览器独有的。<br /><br />仅IE7识别<br />*+html {&hellip;}<br />当面临需要只针对IE7做样式的时候就可以采用这个HACK。<br /><br />IE6及IE6以下识别<br />* html {&hellip;}<br />这个地方要特别注意很多地主都写了是IE6的HACK其实IE5.x同样可以识别这个HACK。其它浏览器不识别。<br />html/**/ &gt;body select {&hellip;&hellip;}<br />这句与上一句的作用相同。<br /><br />仅IE6不识别<br />select { display /*IE6不识别*/:none;}<br />这里主要是通过CSS注释分开一个属性与值，流释在冒号前。<br /><br />仅IE6与IE5不识别<br />select/**/ { display /*IE6,IE5不识别*/:none;}<br />这里与上面一句不同的是在选择符与花括号之间多了一个CSS注释。<br /><br />仅IE5不识别<br />select/*IE5不识别*/ { display:none;}<br />这一句是在上一句中去掉了属性区的注释。只有IE5不识别<br /><br />盒模型解决方法<br />selct {width:IE5.x宽度; voice-family :""}""; voice-family:inherit; width:正确宽度;}<br />盒模型的清除方法不是通过!important来处理的。这点要明确。<br /><br />清除浮动<br />select:after {content:"."; display:block; height:0; clear:both; visibility:hidden;}<br />在Firefox中，当子级都为浮动时，那么父级的高度就无法完全的包住整个子级，那么这时用这个清除浮动的HACK来对父级做一次定义，那么就可以解决这个问题 。<br /><br />截字省略号<br />select { -o-text-overflow:ellipsis; text-overflow:ellipsis; white-space:nowrap; overflow:hidden; }<br />这个是在越出长度后会自行的截掉多出部分的文字，并以省略号结尾，很好的一个技术。只是目前Firefox并不支持。<br /><br />只有Opera识别<br />@media all and (min-width: 0px){ select {&hellip;&hellip;} }<br />针对Opera浏览器做单独的设定。<br /><br />以上都是写CSS中的一些HACK，建议遵循正确的标签嵌套(div ul li 嵌套结构关系)，这样可以减少你使用Hack的频率，不要进入理解误区，并不是一个页面就需要很多的hack来保持多浏览器兼容)，很多情况下也许一个Hack都不用也可以让浏览器工作得非常好，这些都是用来解决局部的兼容性问题，如果希望把兼容性的内容也分离出来，不妨试一下下面的几种过滤器。这些过滤器有的是写在CSS中通过过滤器导入特别的样式，也有的是写在HTML中的通过条件来链接或是导入需要的补丁样式。<br /><br />IE5.x的过滤器，只有IE5.x可见<br />@media tty {<br />i{content:"";/*" "*/}} @import 'ie5win.css'; /*";}<br />}/* */<br /><br />IE5/MAC的过滤器，一般用不着<br />/**//*/<br />@import "ie5mac.css";<br />/**/<br /><br />下面是IE的条件注释，个人觉得用条件注释调用相应 Hack是比较完美的多浏览器兼容的解决办法。把需要hack的地方单独放到一个文件里面，当浏览器版本符合的时候就可以调用那个被Hack的样式，这样不仅使用起来非常方便，而且对于制作这个CSS本身来讲，可以更严格的观察到是否有必要使用hack，很多情况下，当我本人写CSS如果把全部代码包括Hack都写到一个CSS文件的时候的时候会很随意，想怎么Hack就怎么Hack，而你独立出来写的时候，你就会不自觉的考虑是否有必要Hack，是先Hack CSS？还是先把主CSS里面的东西调整到尽可能的不需要Hack？当你仅用很少的Hack就让很多浏览器很乖很听话的时候，你是不是很有成就感呢？你知道怎么选择了吧～～呵呵<br /><br />IE的if条件Hack 自己可以灵活使用参看这篇IE条件注释<br />Only IE&nbsp;<br />所有的IE可识别<br /><br />只有IE5.0可以识别<br />Only IE 5.0+&nbsp;<br />IE5.0包换IE5.5都可以识别<br /><br />仅IE6可识别<br />Only IE 7/-&nbsp;<br />IE6以及IE6以下的IE5.x都可识别<br />Only IE 7/-&nbsp;<br />仅IE7可识别</div>
</div>
<br />
<div id="BodyLabel">IE6、IE7、FF 与兼容性有关的特性<br /><br />CSS HACK<br />代码:<br />所有浏览器 通用<br />height: 100px;<br /><br />IE6 专用<br />_height: 100px;powered by 25175.<a title="25175.net网站" href="http://www.25175.net/">net</a><br /><br />IE6 专用<br />*height: 100px;<br /><br />IE7 专用<br />*+height: 100px;<br /><br />IE7、FF 共用<br />height: 100px !important（优先级）;<br />一、CSS HACK<br />以下两种方法几乎能解决现今所有HACK.<br /><br />1, !important (不是很推荐，用下面的一种感觉最安全)<br /><br />随着IE7对!important的支持, !important 方法现在只针对IE6的HACK.(注意写法.记得该声明位置需要提前.)<br /><br />代码:<br />&lt;style&gt;<br />#wrapper {<br />width: 100px!important; /* IE7+FF */<br />width: 80px; /* IE6 */<br />}<br />&lt;/style&gt;<br /><br />2, IE6/IE77对FireFox &lt;from 针对firefox ie6 ie7的css样式&gt;<br /><br />*+html 与 *html 是IE特有的标签, firefox 暂不支持.而*+html 又为 IE7特有标签.<br /><br />代码:<br />&lt;style&gt;<br />#wrapper { width: 120px; } /* FireFox */<br />*html #wrapper { width: 80px;} /* ie6 fixed */<br />*+html #wrapper { width: 60px;} /* ie7 fixed, 注意顺序 */<br />&lt;/style&gt;<br /><br />注意:<br />*+html 对IE7的HACK 必须保证HTML顶部有如下声明：<br /><br />代码:<br />&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "<a href="http://www.w3.org/TR/html4/loose.dtd" target="_blank">http://www.w3.org/TR/html4/loose.dtd</a>"&gt;<br /><br />二、万能 float 闭合(非常重要!) 可以用这个解决多个div对齐时的间距不对，<br /><br />关于 clear float 的原理可参见 [How To Clear Floats Without Structural Markup]<br />将以下代码加入Global CSS 中,给需要闭合的div加上 class=&rdquo;clearfix&rdquo; 即可,屡试不爽.<br /><br />代码:<br />&lt;style&gt;<br />/* Clear Fix */<br />.clearfix:after {<br />content:".";<br />display:block;<br />height:0;<br />clear:both;<br />visibility:hidden;<br />}<br />.clearfix {<br />display:inline-block;<br />}<br />/* Hide from IE Mac \*/<br />.clearfix {display:block;}<br />/* End hide from IE Mac */<br />/* end of clearfix */<br />&lt;/style&gt;<br /><br />三、其他兼容技巧(相当有用)<br /><br />1, FF下给 div 设置 padding 后会导致 width 和 height 增加, 但IE不会.(可用!important解决)<br />2, 居中问题.<br />1).垂直居中.将 line-height 设置为 当前 div 相同的高度, 再通过 vertical-align: middle.( 注意内容不要换行.)<br />2).水平居中. margin: 0 auto;(当然不是万能)<br />3, 若需给 a 标签内内容加上 样式, 需要设置 display: block;(常见于导航标签)<br />4, FF 和 IE 对 BOX 理解的差异导致相差 2px 的还有设为 float的div在ie下 margin加倍等问题.<br />5, ul 标签在 FF 下面默认有 list-style 和 padding . 最好事先声明, 以避免不必要的麻烦. (常见于导航标签和内容列表)<br />6, 作为外部 wrapper 的 div 不要定死高度, 最好还加上 overflow: hidden.以达到高度自适应.<br />7, 关于手形光标. cursor: pointer. 而hand 只适用于 IE.贴上代码:<br /><br />兼容代码:hack最推荐的模式。<br />/* FF */<br />.submitbutton {<br />float:left;<br />width: 40px;<br />height: 57px;<br />margin-top: 24px;<br />margin-right: 12px;<br />}<br />/* IE6 */<br />*html .submitbutton {<br />margin-top: 21px;<br />}<br />/* IE7 */<br />*+html .submitbutton {<br />margin-top: 21px;<br />}<br /><br /><br /><br /><br /><br />什么是浏览器HACK：当我们使用不同的浏览器（Firefox IE7 IE6）访问同一个网站，或者页面的时候，会出现一些不兼容的问题，有的显示出来正常，有的显示出来不正常，我们在编写CSS的时候会很恼火，刚修复了这个浏览器的问题，结果另外一个浏览器却出了新问题。而HACK就是一种办法，能让你在一个CSS里面独立的写支持不同浏览器的样式。这下就和谐了。呵呵！<br /><br />最近微软发布的IE7浏览器的兼容性确实给一些网页制作人员添加了一个沉重的负担，虽然IE7已经走向标准化，但还是有许多和FF不同的地方，所以需要用到IE7的HACK，有许多朋友问过IE7的HACK是什么，其实我也不知道。暂时还没找到IE7专用的HACK。除了前面那片文章，《针对firefox ie6 ie7的css样式》中的hack方式也是很好用的。<br /><br />有一点逻辑思想的人都会知道可以用IE和FF的HACK结合起来使用，下面介绍三个HACK，例如：（适合新手，呵呵，高手就在这里路过吧。）<br /><br />程序代码<br /><br />第一个HACK，IE FF 所有浏览器 公用（其实也不算是HACK）<br />height:100px;<br />第二个HACK IE6专用<br />_height:100px;<br />第三个HACK IE6 IE7公用<br />*height:100px;<br /><br />介绍完了这三个HACK了，下面我们再来看看如何在一个样式里分别给一个属性定义IE6 IE7 FF专用的HACK，看下面的代码，顺序不能错哦：<br /><br />程序代码<br /><br />height:100px;<br />*height:120px;<br />_height:150px;<br /><br />下面我简单解释一下各浏览器怎样理解这三个属性：<br /><br />在FF下，第2、3个属性FF不认识，所以它读的是 height:100px;<br /><br />在IE7下，第三个属性IE7不认识，所以它读第1、2个属性，又因为第二个属性覆盖了第一个属性，所以IE7最终读出的是第2个属性 *height:120px;<br /><br />在IE6下，三个属性IE6都认识，所以三个属性都可以读取，又因为第三个属性覆盖掉前2个属性，所以IE6最终读取的是第三个属性。<br /><br /><br /><br /><br /><br />1 针对firefox ie6 ie7的css样式<br /><br />现在大部分都是用!important来hack，对于ie6和firefox测试可以正常显示，但是ie7对!important可以正确解释，会导致页面没按要求显示！找到一个针对IE7不错的hack方式就是使用&ldquo;*+html&rdquo;，现在用IE7浏览一下，应该没有问题了现在写一个CSS可以这样：<br /><br />#1 { color: #333; } /* Moz */<br />* html #1 { color: #666; } /* IE6 */<br />*+html #1 { color: #999; } /* IE7 */<br /><br /><br />那么在firefox下字体颜色显示为#333，IE6下字体颜色显示为#666，IE7下字体颜色显示为#999。<br /><br />2 css布局中的居中问题<br /><br />主要的样式定义如下：<br /><br />body {TEXT-ALIGN: center;}<br />#center { MARGIN-RIGHT: auto; MARGIN-LEFT: auto; }<br /><br />说明：<br /><br />首先在父级元素定义TEXT-ALIGN: center;这个的意思就是在父级元素内的内容居中；对于IE这样设定就已经可以了。<br /><br />但在mozilla中不能居中。解决办法就是在子元素定义时候设定时再加上&ldquo;MARGIN-RIGHT: auto;MARGIN-LEFT: auto; &rdquo;<br /><br />需要说明的是，如果你想用这个方法使整个页面要居中，建议不要套在一个DIV里，你可以依次拆出多个div，只要在每个拆出的div里定义MARGIN-RIGHT: auto;MARGIN-LEFT: auto; 就可以了。<br /><br />3 盒模型不同解释.<br /><br />#box{<br />width:600px;<br />//for ie6.0- w\idth:500px;<br />//for ff+ie6.0<br />}<br />#box{<br />width:600px!important<br />//for ff<br />width:600px;<br />//for ff+ie6.0<br />width /**/:500px;<br />//for ie6.0-<br />}<br /><br />4 浮动ie产生的双倍距离<br /><br />#box{ float:left; width:100px; margin:0 0 0 100px; //这种情况之下IE会产生200px的距离 display:inline; //使浮动忽略}<br /><br />这里细说一下block,inline两个元素,Block元素的特点是:总是在新行上开始,高度,宽度,行高,边距都可以控制(块元素);Inline元素的特点是:和其他元素在同一行上,&hellip;不可控制(内嵌元素);<br /><br />#box{ display:block; //可以为内嵌元素模拟为块元素 display:inline; //实现同一行排列的的效果 diplay:table;<br /><br />5 IE与宽度和高度的问题<br /><br />IE不认得min-这个定义，但实际上它把正常的width和height当作有min的情况来使。这样问题就大了，如果只用宽度和高度，正常的浏览器里这两个值就不会变，如果只用min-width和min-height的话，IE下面根本等于没有设置宽度和高度。比如要设置背景图片，这个宽度是比较重要的。要解决这个问题，可以这样：<br /><br />#box{ width: 80px; height: 35px;}html&gt;body #box{ width: auto; height: auto; min-width: 80px; min-height: 35px;}<br /><br />6 页面的最小宽度<br /><br />min-width是个非常方便的CSS命令，它可以指定元素最小也不能小于某个宽度，这样就能保证排版一直正确。但IE不认得这个，而它实际上把 width当做最小宽度来使。为了让这一命令在IE上也能用，可以把一个&lt;div&gt; 放到 &lt;body&gt; 标签下，然后为div指定一个类：<br />然后CSS这样设计：<br /><br />#container{<br />min-width: 600px;<br />width:e?xpression(document.body.clientWidth &lt; 600? &ldquo;600px&rdquo;: &ldquo;auto&rdquo; );<br />}<br /><br />第一个min-width是正常的；但第2行的width使用了Javascript，这只有IE才认得，这也会让你的HTML文档不太正规。它实际上通过Javascript的判断来实现最小宽度。<br /><br />7 清除浮动<br /><br />.hackbox{<br />display:table;<br />//将对象作为块元素级的表格显示<br />}<br /><br />或者<br /><br />.hackbox{<br />clear:both;<br />}<br /><br />或者加入:after（伪对象）,设置在对象后发生的内容，通常和content配合使用，IE不支持此伪对象，非Ie 浏览器支持，所以并不影响到IE/WIN浏览器。这种的最麻烦的<br /><br />&hellip;&hellip;#box:after{<br />content: &ldquo;.&rdquo;;<br />display: block;<br />height: 0;<br />clear: both;<br />visibility: hidden;<br />}<br /><br />8 DIV浮动IE文本产生3象素的bug<br /><br />左边对象浮动，右边采用外补丁的左边距来定位，右边对象内的文本会离左边有3px的间距.<br /><br />#box{<br />float:left;<br />width:800px;}<br />#left{<br />float:left;<br />width:50%;}<br />#right{<br />width:50%;<br />}<br />*html #left{<br />margin-right:-3px;<br />//这句是关键<br />}<br />HTML代码<br />&lt;DIV id=box&gt;<br />&lt;DIV id=left&gt;&lt;/DIV&gt;<br />&lt;DIV id=right&gt;&lt;/DIV&gt;<br />&lt;/DIV&gt;<br /><br />9 属性选择器(这个不能算是兼容,是隐藏css的一个bug)<br /><br />p[id]{}div[id]{}<br />p[id]{}div[id]{}<br /><br />这个对于IE6.0和IE6.0以下的版本都隐藏,FF和OPera作用<br /><br />属性选择器和子选择器还是有区别的,子选择器的范围从形式来说缩小了,属性选择器的范围比较大,如p[id]中,所有p标签中有id的都是同样式的.<br /><br />10 IE捉迷藏的问题<br /><br />当div应用复杂的时候每个栏中又有一些链接，DIV等这个时候容易发生捉迷藏的问题。<br />有些内容显示不出来，当鼠标选择这个区域是发现内容确实在页面。<br />解决办法：对#layout使用line-height属性 或者给#layout使用固定高和宽。页面结构尽量简单。<br /><br />11 高度不适应<br /><br />高度不适应是当内层对象的高度发生变化时外层高度不能自动进行调节，特别是当内层对象使用<br />margin 或paddign 时。例：<br /><br />&lt;div id=&rdquo;box&rdquo;&gt;<br />&lt;p&gt;p对象中的内容&lt;/p&gt;<br />&lt;/div&gt;<br /><br />CSS：<br /><br />#box {background-color:#eee; }<br />#box p {margin-top: 20px;margin-bottom: 20px; text-align:center; }<br /><br />解决方法：在P对象上下各加2个空的div对象CSS代码：.1{height:0px;overflow:hidden;}或者为DIV加上border属性。<br /><br /><br /><br /><br /><br />屏蔽IE浏览器（也就是IE下不显示）<br />*:lang(zh) select {font:12px !important;} /*FF,OP可见*/<br />select:empty {font:12px !important;} /*safari可见*/<br />这里select是选择符，根据情况更换。第二句是MAC上safari浏览器独有的。<br /><br />仅IE7识别<br />*+html {&hellip;}<br />当面临需要只针对IE7做样式的时候就可以采用这个HACK。<br /><br />IE6及IE6以下识别<br />* html {&hellip;}<br />这个地方要特别注意很多地主都写了是IE6的HACK其实IE5.x同样可以识别这个HACK。其它浏览器不识别。<br />html/**/ &gt;body select {&hellip;&hellip;}<br />这句与上一句的作用相同。<br /><br />仅IE6不识别<br />select { display /*IE6不识别*/:none;}<br />这里主要是通过CSS注释分开一个属性与值，流释在冒号前。<br /><br />仅IE6与IE5不识别<br />select/**/ { display /*IE6,IE5不识别*/:none;}<br />这里与上面一句不同的是在选择符与花括号之间多了一个CSS注释。<br /><br />仅IE5不识别<br />select/*IE5不识别*/ { display:none;}<br />这一句是在上一句中去掉了属性区的注释。只有IE5不识别<br /><br />盒模型解决方法<br />selct {width:IE5.x宽度; voice-family :""}""; voice-family:inherit; width:正确宽度;}<br />盒模型的清除方法不是通过!important来处理的。这点要明确。<br /><br />清除浮动<br />select:after {content:"."; display:block; height:0; clear:both; visibility:hidden;}<br />在Firefox中，当子级都为浮动时，那么父级的高度就无法完全的包住整个子级，那么这时用这个清除浮动的HACK来对父级做一次定义，那么就可以解决这个问题 。<br /><br />截字省略号<br />select { -o-text-overflow:ellipsis; text-overflow:ellipsis; white-space:nowrap; overflow:hidden; }<br />这个是在越出长度后会自行的截掉多出部分的文字，并以省略号结尾，很好的一个技术。只是目前Firefox并不支持。<br /><br />只有Opera识别<br />@media all and (min-width: 0px){ select {&hellip;&hellip;} }<br />针对Opera浏览器做单独的设定。<br /><br />以上都是写CSS中的一些HACK，建议遵循正确的标签嵌套(div ul li 嵌套结构关系)，这样可以减少你使用Hack的频率，不要进入理解误区，并不是一个页面就需要很多的hack来保持多浏览器兼容)，很多情况下也许一个Hack都不用也可以让浏览器工作得非常好，这些都是用来解决局部的兼容性问题，如果希望把兼容性的内容也分离出来，不妨试一下下面的几种过滤器。这些过滤器有的是写在CSS中通过过滤器导入特别的样式，也有的是写在HTML中的通过条件来链接或是导入需要的补丁样式。<br /><br />IE5.x的过滤器，只有IE5.x可见<br />@media tty {<br />i{content:"";/*" "*/}} @import 'ie5win.css'; /*";}<br />}/* */<br /><br />IE5/MAC的过滤器，一般用不着<br />/**//*/<br />@import "ie5mac.css";<br />/**/<br /><br />下面是IE的条件注释，个人觉得用条件注释调用相应 Hack是比较完美的多浏览器兼容的解决办法。把需要hack的地方单独放到一个文件里面，当浏览器版本符合的时候就可以调用那个被Hack的样式，这样不仅使用起来非常方便，而且对于制作这个CSS本身来讲，可以更严格的观察到是否有必要使用hack，很多情况下，当我本人写CSS如果把全部代码包括Hack都写到一个CSS文件的时候的时候会很随意，想怎么Hack就怎么Hack，而你独立出来写的时候，你就会不自觉的考虑是否有必要Hack，是先Hack CSS？还是先把主CSS里面的东西调整到尽可能的不需要Hack？当你仅用很少的Hack就让很多浏览器很乖很听话的时候，你是不是很有成就感呢？你知道怎么选择了吧～～呵呵<br /><br />IE的if条件Hack 自己可以灵活使用参看这篇IE条件注释<br />Only IE&nbsp;<br />所有的IE可识别<br /><br />只有IE5.0可以识别<br />Only IE 5.0+&nbsp;<br />IE5.0包换IE5.5都可以识别<br /><br />仅IE6可识别<br />Only IE 7/-&nbsp;<br />IE6以及IE6以下的IE5.x都可识别<br />Only IE 7/-&nbsp;<br />仅IE7可识别<br /><br /><br /><br /><br /><br />Css 当中有许多的东西不不按照某些规律来的话，会让你很心烦，虽然你可以通过很多的hack，很多的!important 来控制它，但是你会发现长此以往你会很不甘心，看看许多优秀的网站，他们的CSS让IE6,Ie7,Firefox,甚至Safari,Opera运行起来完美无缺是不是很羡慕？而他们看似复杂的模版下面使用的Hack 少得可怜。其实你要知道IE 和 Firefox 并不不是那么的不和谐，我们找到一定的方法，是完全可以让他们和谐共处的。不要你认为发现了hack的办法，你就掌握了一切，我们并不是Hack的奴隶。<br /><br />div ul li 的嵌套顺序<br /><br />今天只讲一个规则。就是&lt;div&gt;&lt;ul&gt;&lt;li&gt;的三角关系。我的经验就是&lt;div&gt;在最外面，里面是&lt;ul&gt;，然后再是&lt;li&gt;，当然&lt;li&gt;里面又可以嵌套&lt;div&gt;什么的，但是并不建议你嵌套很多东西。当你符合这样的规则的时候，那些倒霉的，不听话的间隙就不会在里面出现了，当你仅仅是&lt;div&gt;里面放&lt;li&gt;，而不用&lt;ul&gt;的时候，你会发现你的间隙十分难控制，一般情况下，IE6和IE7会凭空多一些间距。但很多情况你来到下一行，间隙就没了，但是前面的内容又空了很大一块，出现这种情况虽然你可以改变IE的Margin，然后调整Firefox下面的Padding，以便使得两者显示起来得效果很相似，但是你得CSS将变得臭长无比，你不得不多考虑更多可能出现这种问题补救措施，虽然你知道千篇一律来Hack它们，但是你会烦得要命。<br /><br />具体嵌套写法<br /><br />遵循上面得嵌套方式，&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; 然后在CSS 里面告诉 ul {Margin:0px;Padding:0px;list-style:none;}，其中list-style:none是不让&lt;li&gt;标记的最前方显示圆点或者数字等目录类型的标记，因为IE和Firefox显示出来默认效果有些不一样。因此这样不需要做任何手脚，你的IE6、和IE7、Firefox显示出来的东西(外距，间距，高度，宽度)就几乎没什么区别了，也许细心的你会在某一个时刻发现一、两个象素的差别，但那已经很完美了，不需要你通过调整大片的CSS来控制它们的显示了，你愿意，你可以仅仅hack一两个地方，而且通常这种hack可以适应各种地方，不需要你重复在不同的地方调试不同的Hack方式&ndash;减轻你的烦恼。你可以ul.class1, ul.class2, ul.class3 {xxx:xxxx}的方式方便的整理出你要hack的地方，而统一Hack。尝试一下吧，再也不要乱嵌套了，虽然在Div+CSS的方式下你几乎可以想怎么嵌套就怎么嵌套，但是按照上面的规律你将轻松很多，从而事半功倍！<br /><br />
<div id="BodyLabel">&lt;script type="text/javas<wbr></wbr>cript"&gt;<br />&nbsp; /*<br />&nbsp; **兼容IE,Firefox 遵循W3C标准写法的图片无缝滚动代码（支持左移/右移功能）(本示例为上下两行图片进行双行滚动)powered by 25175.<a title="25175.net网站" href="http://www.25175.net/">net</a><br />&nbsp; **<br />&nbsp; **实现思路：一个设定宽度并且隐藏超出它宽度的内容的容器demo，里面放demo1和demo2，demo1是滚动内容,demo2为demo1的直接克隆，<br />&nbsp; **通过不断改变demo1的scrollTop或者scrollLeft达到滚动的目的，当滚动至demo1与demo2的交界处时直接跳回初始位置，<br />&nbsp; **因为demo1与demo2一样，所以分不出跳动的瞬间，从而达到&ldquo;无缝&rdquo;滚动的目的。&nbsp;<br />&nbsp; */&nbsp;<br />&nbsp; var speed1=0&nbsp;//图片左移的速度<br />&nbsp; var MyMar1&nbsp;//setInterverval方法返回的间隔ID,些ID为全局的调用次数(用于第一行图片)<br />&nbsp; var MyMar2&nbsp;//setInterverval方法返回的间隔ID,些ID为全局的调用次数(用于第二行图片)<br />&nbsp; var lefthit=0&nbsp;&nbsp;//记录左移按钮点击次数<br />&nbsp; var righthit=0&nbsp;////记录右移按钮点击次数&nbsp;&nbsp;<br />&nbsp; //调用右移方法前,先让左移停止（clearInterval清除setInterval对方法的调用）<br />&nbsp; function clearleft(){<br />&nbsp; &nbsp;clearInterval(MyMar1)<br />&nbsp; &nbsp;clearInterval(MyMar2)<br />&nbsp; }&nbsp;<br />&nbsp; //图片左移的方法<br />&nbsp; function toleft(){<br />&nbsp; &nbsp;&nbsp; //判断是否是第一次按下左移按钮（图片往左开始移动的时候，不会在调用此方法。只有当按了右移按钮时，才会把lefthit重设为0）<br />&nbsp;&nbsp; if(lefthit==0){<br />&nbsp;&nbsp;&nbsp; speed1=30;//图片左移速度时间毫秒<br />&nbsp;&nbsp;&nbsp; //让的内容demo2与demo1内容一样<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo2").innerHTML=document.getElementById("demo1").innerHTML<br />&nbsp;&nbsp;&nbsp; //上行图片移动的方法<br />&nbsp;&nbsp;&nbsp; function Marquee1(){<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; //当demo滚动至demo2的交界处。与就是与demo2重合时。offsetWidth与scrollLeft刚好相等<br />&nbsp;&nbsp;&nbsp;&nbsp; if(document.getElementById("demo2").offsetWidth-document.getElementById("demo").scrollLeft&lt;=0){<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;//demo跳回初始位置<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;document.getElementById("demo").scrollLeft-=document.getElementById("demo1").offsetWidth<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; else{<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;//demo开始重新移动<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;document.getElementById("demo").scrollLeft++<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; //setInterval让Marquee1方法每隔多少秒执行一次，并把返回的调用次数ID<br />&nbsp;&nbsp;&nbsp; MyMar1=setInterval(Marquee1,speed1)<br />&nbsp;&nbsp;&nbsp; //当鼠标移动demo上面时。调用clearInterval清除MyMar1.这样图片便不会在移动了。移到图片时，第一行和第二行的图片都会停止<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo").on<wbr></wbr>mouseover=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {clearInterval(MyMar1);clearInterval(MyMar2)}<br />&nbsp;&nbsp;&nbsp; //当鼠标移除demo时,重新setInterval让方法执行，这样图片会继续移动<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo").on<wbr></wbr>mouseout=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {MyMar1=setInterval(Marquee1,speed1);clearInterval(MyMar2);MyMar2=setInterval(Marquee2,speed1)}<br />&nbsp;&nbsp; &nbsp;&nbsp; //下面的方法与上面的方法一样，用于第二行的图片向左移动<br />&nbsp;&nbsp; &nbsp;&nbsp; document.getElementById("demo_c").innerHTML=document.getElementById("demo_b").innerHTML<br />&nbsp;&nbsp;&nbsp; function Marquee2(){<br />&nbsp;&nbsp;&nbsp;&nbsp; if(document.getElementById("demo_c").offsetWidth-document.getElementById("demo_a").scrollLeft&lt;=0){<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;document.getElementById("demo_a").scrollLeft-=document.getElementById("demo_b").offsetWidth}<br />&nbsp;&nbsp;&nbsp;&nbsp; else{<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;document.getElementById("demo_a").scrollLeft++<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; MyMar2=setInterval(Marquee2,speed1)<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo_a").on<wbr></wbr>mouseover=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {clearInterval(MyMar2);clearInterval(MyMar1)}<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo_a").on<wbr></wbr>mouseout=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {MyMar2=setInterval(Marquee2,speed1); document.getElementById("demo").on<wbr></wbr>mouseout()}<br />&nbsp;&nbsp;&nbsp; lefthit=1&nbsp;&nbsp;//设置左移按钮，当按了一次左移后(不管按多少次)，在没按右移按钮之前，toleft方法里的的代码不会再被执行<br />&nbsp;&nbsp;&nbsp; righthit=0&nbsp;//把右移按钮设为0,这样当下次点了右移按钮的时候，以便toright方法被调用<br />&nbsp;&nbsp; }<br />&nbsp; }<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp; var MyMar3&nbsp;//setInterverval方法返回的间隔ID,些ID为全局的调用次数(用于第一行图片)<br />&nbsp; var MyMar4&nbsp;//setInterverval方法返回的间隔ID,些ID为全局的调用次数(用于第二行图片)<br />&nbsp; var speed2=0&nbsp;//图片右移的速度<br />&nbsp; //调用移左方法前,先让右移停止（clearInterval清除setInterval对方法的调用）<br />&nbsp; function clearright(){<br />&nbsp; &nbsp;clearInterval(MyMar3)<br />&nbsp; &nbsp;clearInterval(MyMar4)<br />&nbsp; }<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp; //图片右移方法(与图片左移方法思路一样)<br />&nbsp; function toright(){<br />&nbsp;&nbsp; &nbsp;&nbsp; //判断是否是第一次按下右移按钮（图片往右开始移动的时候，不会在调用此方法。只有当按了左移按钮时，才会把righthit重设为0）<br />&nbsp;&nbsp; if(righthit==0){<br />&nbsp;&nbsp;&nbsp; speed2=30;<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo2").innerHTML=document.getElementById("demo1").innerHTML<br />&nbsp;&nbsp;&nbsp; function Marquee_a(){<br />&nbsp;&nbsp;&nbsp;&nbsp; if(document.getElementById("demo").scrollLeft&lt;=0){<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;document.getElementById("demo").scrollLeft=document.getElementById("demo2").offsetWidth<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; else{<br />&nbsp;&nbsp;&nbsp; &nbsp; document.getElementById("demo").scrollLeft--<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; MyMar3=setInterval(Marquee_a,speed2)<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo").on<wbr></wbr>mouseover=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {clearInterval(MyMar3);document.getElementById("demo_a").on<wbr></wbr>mouseover()}<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo").on<wbr></wbr>mouseout=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {MyMar3=setInterval(Marquee_a,speed2);clearInterval(MyMar4);MyMar4=setInterval(Marquee_b,speed2)}<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo_c").innerHTML=document.getElementById("demo_b").innerHTML<br />&nbsp;&nbsp;&nbsp; function Marquee_b(){<br />&nbsp;&nbsp;&nbsp;&nbsp; if(document.getElementById("demo_a").scrollLeft&lt;=0){<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;document.getElementById("demo_a").scrollLeft=document.getElementById("demo_c").offsetWidth<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; else{<br />&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;document.getElementById("demo_a").scrollLeft--<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; MyMar4=setInterval(Marquee_b,speed2)<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo_a").on<wbr></wbr>mouseover=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {clearInterval(MyMar4);clearInterval(MyMar3)}<br />&nbsp;&nbsp;&nbsp; document.getElementById("demo_a").on<wbr></wbr>mouseout=function()&nbsp;<br />&nbsp;&nbsp;&nbsp; {MyMar4=setInterval(Marquee_b,speed2);document.getElementById("demo").on<wbr></wbr>mouseout()}<br />&nbsp;&nbsp;&nbsp; righthit=1&nbsp;//设置右移按钮，当按了一次右移按钮后(不管按多少次)，在没按左移按钮之前，toright方法里的的代码不会再被执行<br />&nbsp;&nbsp;&nbsp; lefthit=0&nbsp;//把左移按钮设为0,这样当下次点了左移按钮的时候，以便toleft方法被调用<br />&nbsp;&nbsp; }<br />&nbsp; }<br />&lt;/script&gt;</div>
<div></div>
</div>
</h3></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2011-05-17 14:33</span> <a href='http://www.cnblogs.com/myitm/'>心随灵动</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=2048850" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2048850);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=57221,cb_entryId=2048850,cb_blogApp=currentBlogApp,cb_blogUserGuid='58267e91-3e53-de11-9510-001cf0cd104b',cb_entryCreatedDate='2011/5/17 14:33:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="程序员的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="ad_under_post_holder"></div>
<script type="text/javascript">
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
fixPostBodyFormat();
loadAdUnderPost();
</script>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
loadBlogSignature();
LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
</script>
<script type="text/javascript">
    $.ajax({ url: 'http://counter.cnblogs.com/blog/post/' + cb_entryId, type: 'get', dataType: 'script', cache: true });
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2014 心随灵动
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
</body>
</html>
